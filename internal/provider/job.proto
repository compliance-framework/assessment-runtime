syntax = "proto3";

package plugin;
option go_package = "./provider";
import "google/protobuf/timestamp.proto";

message Property {
  string Name = 1;
  string Value = 2;
}

enum LogType {
  INFO = 0;
  ERROR = 1;
  WARNING = 2;
  DEBUG = 3;
}

// LogEntry holds the logging information
// TODO: We should introduce any.proto to hold different types of values
message LogEntry {
  string Id = 1;
  google.protobuf.Timestamp Timestamp = 2;
  LogType Type = 3;
  string Details = 4;
}

message Expression {
  string Key = 1;
  string Operator = 2;
  repeated string Values = 3;
}

message Selector {
  string Query = 1;
  map<string, string> Labels = 2;
  repeated Expression Expressions = 3;
  repeated string Ids = 4;
}

message Subject {
  string Id = 1;
  map<string, string> Props = 2;
}

message SubjectList {
  repeated Subject Subjects = 1;
}

message Link {
  string Href = 1;
  string MediaType = 2;
  string Rel = 3;
  string ResourceFragment = 4;
  string Text = 5;
}

message Evidence {
  string Description = 1;
  string Href = 2;
  repeated Link Links = 3;
  repeated Property Props = 4;
  string Remarks = 5;
}

message Observation {
  string Uuid = 1;
  string SubjectId = 2;
  string Collected = 3;
  string Title = 4;
  string Description = 5;
  string Expires = 6;
  string Remarks = 7;
  repeated Link Links = 8;
  repeated Property Props = 9;
  repeated Evidence RelevantEvidence = 10;
}

message Risk {
  string SubjectId = 1;
  string Description = 2;
  int32 Score = 3;
}

message Plan {
  string Id = 1;
  string ComponentId = 2;
  string ControlId = 3;
  string TaskId = 4;
  string ActivityId = 5;
}

/**
 * EvaluateInput holds the information about the assessment plan
 * and the selector to use to find the subjects to assess.
 */
message EvaluateInput {
  Plan Plan = 1;
  Selector Selector = 2;

  // Configuration is a map of configuration values that are passed to the provider
  // It is similar to the `provider.configuration` section in the yaml file
  map<string, string> Configuration = 3;
}

message EvaluateResult {
  repeated Subject Subjects = 1;
  repeated LogEntry Logs = 2;

  // It's a temporary storage that the provider developer can use to pass information between
  // the Evaluate and Execute methods.
  // The information here is passed to the Props field of the ExecuteInput message.
  map<string, string> Props = 3;
}

/**
 * ExecuteInput is the input to a job.
 */
message ExecuteInput {
  Plan Plan = 1;
  Subject Subject = 2;
  map<string, string> Props = 3;
  map<string, string> Configuration = 4;
}

enum ExecutionStatus {
  SUCCESS = 0;
  FAILURE = 1;
}

/**
 * ExecuteResult is the result of an assessment check
 * We don't use the Plan information here as it can be provided by the runtime
 */
message ExecuteResult {
  ExecutionStatus Status = 2;
  repeated Observation Observations = 3;
  repeated Risk Risks = 4;
  repeated LogEntry Logs = 5;
}

service JobService {
  rpc Evaluate (EvaluateInput) returns (EvaluateResult);
  rpc Execute (ExecuteInput) returns (ExecuteResult);
}
